## Docker build is the only one supporting native image build
quarkus.openshift.build-strategy=docker
##For native image build
quarkus.native.container-build=true
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.route.expose=true
## Path to the docker file for the build
quarkus.openshift.native-dockerfile=src/main/docker/Dockerfile.native
## it can be also set with podman as alternative container runtime
quarkus.native.container-runtime=docker


bank.name=Bank name from properties file

%dev.bank.name=Bank name from properties file (${quarkus.profile} profile)
%prod.bank.name=Bank of Production (${quarkus.profile} profile)

#ConfigProperties
support.email=email@bank.com
bank-support.phone=555-555-555
bank-support.email=${support.email}
#ConfigMapping
bank-support-mapping.email=support@bankofquarkus.com
bank-support-mapping.phone=555-555-5555
##properties for the nested interface
bank-support-mapping.business.email=business-support@bankofquarkus.com
bank-support-mapping.business.phone=555-555-1234

%prod.quarkus.kubernetes-config.enabled=true
#comma separated list of cm names to be scanned
%prod.quarkus.kubernetes-config.config-maps=banking
%prod.quarkus.kubernetes-config.secrets.enabled=true
%prod.quarkus.kubernetes-config.secrets=db-credentials

## Security
quarkus.oidc.enabled=true
#Disables TLS verification of the self-signed certificate installed by
# the Keycloak Operator
quarkus.oidc.tls.verification=none

#The URL for Keycloak as an OIDC authorization server.
# The bank realm is specified in the URL
%dev.quarkus.oidc.auth-server-url=http://localhost:8881/realms/bank
%prod.quarkus.oidc.auth-server-url=https://keycloak:8443/realms/bank
%staging.quarkus.oidc.auth-server-url=http://localhost:8080/realms/bank
#The OIDC client ID. An OIDC client ID typically has an associated client secret (e.g., password), the
#credentials for a client to access an identity provider.
# To keep things simple, the bank client does not have a client secret.
quarkus.oidc.client-id=bank
#this is the secret of the client on Keycloak Clients->Client details->credentials-client secret
quarkus.oidc.credentials.secret=4DePVOuZxVKNGYD9FLQk9sQ2SCT0QMYZ
#Uses the Authorization Code Flow (web app).
# The OIDC extension redirects the user to a Keycloak provided login screen.
quarkus.oidc.application-type=web-app
#The Bank service, copied from chapter 3, requires the username and password properties to be
#defined. These properties are not used in this example.
quarkus.oidc.authentication.fail-on-missing-state-param=false

#Directs the test framework to the mocked OIDC server. OidcWiremockTestResource.class replaces
#${keycloak.url} with the host and port of the mocked OIDC server. OidcWiremockTestResource.class
#also preconfigures a quarkus realm.
%test.quarkus.oidc.auth-server-url=${keycloak.url}/realms/quarkus
%test.quarkus.oidc.token.admin-roles=bankadmin
quarkus.test.oidc.token.admin-roles=bankadmin
#%test.quarkus.oidc.token.admin-roles=user,admin
%test.quarkus.oidc.token.issuer=https://server.example.com
%test.quarkus.oidc.token.=https://server.example.com
username=admin
password=admin

quarkus.http.port=8286
quarkus.log.level=DEBUG

