## Docker build is the only one supporting native image build
quarkus.openshift.build-strategy=docker
##For native image build
quarkus.native.container-build=true
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.route.expose=true
## Path to the docker file for the build
quarkus.openshift.native-dockerfile=src/main/docker/Dockerfile.native
## it can be also set with podman as alternative container runtime
quarkus.native.container-runtime=docker
#quarkus.log.level=DEBUG

quarkus.rest-client.account-service.scope=singleton
# configuration with the account service running on the local machine
%dev.quarkus.http.port=8088
%test.quarkus.http.port=8888
quarkus.http.test-port=8888
quarkus.http.test-ssl-port=8446
%dev.quarkus.rest-client.account-service.url=http://localhost:8082
#hostname from the service (ClusterIp)
%prod.quarkus.kubernetes-config.enabled=true
#comma separated list of cm names to be scanned
%prod.quarkus.kubernetes-config.config-maps=transaction-service-cm

# KAFKA
kafka.bootstrap.servers=localhost:29092
mp.messaging.incoming.overdraft-fee.connector=smallrye-kafka
mp.messaging.incoming.overdraft-fee.topic=account-fee
mp.messaging.incoming.overdraft-fee.value.deserializer=transactionservice.AccountFeeDeserializer
mp.messaging.incoming.overdraft-fee.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

#activated native testing for integration test: check the profile setting in the pom file
quarkus.test.integration-test-profile=native

#URL for the Jaeger collector. Microservices send any traces to the collector. Defining it as a
#production configuration means the default URL, http://jaeger-collector:14268/api/traces, will work
#running locally with Docker
%prod.quarkus.jaeger.endpoint=http://simplest-collector.observability:14268/api/traces
#the name given to app spans in traces
quarkus.jaeger.service-name=transaction-service
#the sample type: const, probabilistic, rate-limiting, and remote
quarkus.jaeger.sampler-type=const
#in conjunction with sampler-type, in this case 1 means all ops are logged
quarkus.jaeger.sampler-param=1

## Security using Quarkus built-in policy controls

quarkus.http.auth.permission.customer.paths=/transactions/config-secure/*
quarkus.http.auth.permission.customer.methods=GET
#ROLES SETTINGS - START
#Creates a policy, named customer-policy, that grants access to users
# that are assigned the customer role
quarkus.http.auth.policy.customer-policy.roles-allowed=customer
#Applies the customer-policy policy to the customer permission
quarkus.http.auth.permission.customer.policy=customer-policy
#Refines the customer permission to allow only authenticated users
# to access the secured endpoint
#quarkus.http.auth.permission.customer.policy=authenticated
#ROLES SETTINGS - END
# Security - Embedded users/roles (File realm)
%dev.quarkus.security.users.embedded.enabled=true
#Enables clear-text passwords. If set to false or omitted, then the password
# is assumed to be an MD5 password hash.
# Only clear-text and MD5 hashed passwords are currently supported
%dev.quarkus.security.users.embedded.plain-text=true
#Creates user duke with a password of duke
%dev.quarkus.security.users.embedded.users.duke=duke
#Assigns user duke the customer role
%dev.quarkus.security.users.embedded.roles.duke=customer
%dev.quarkus.security.users.embedded.users.quarkus=quarkus
%dev.quarkus.security.users.embedded.roles.quarkus=teller
# Enable HTTP BASIC AUTHENTICATION only during development
#Enables HTTP basic authentication. The user is prompted to provide a username and password when
#using a web browser.
# When using the curl command, user credentials are provided using the --user
#command line option, like --user duke:duke.
%dev.quarkus.http.auth.basic=true



