
## Docker build is the only one supporting native image build
##For native image build
quarkus.native.container-build=true
quarkus.kubernetes-client.trust-certs=true


quarkus.kubernetes.name=overdraft-service

%prod.kafka.bootstrap.servers=my-cluster-kafka-bootstrap.kafka:9092
kafka.bootstrap.servers=localhost:29092

mp.messaging.incoming.account-overdrawn.connector=smallrye-kafka
mp.messaging.incoming.account-overdrawn.topic=overdrawn
mp.messaging.incoming.account-overdrawn.value.deserializer=quarkus.overdraft.OverdrawnDeserializer
mp.messaging.incoming.account-overdrawn.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mp.messaging.outgoing.overdraft-fee.connector=smallrye-kafka
mp.messaging.outgoing.overdraft-fee.topic=account-fee
mp.messaging.outgoing.overdraft-fee.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.overdraft-fee.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor

mp.messaging.outgoing.overdraft-update.connector=smallrye-kafka
mp.messaging.outgoing.overdraft-update.topic=new-limit
mp.messaging.outgoing.overdraft-update.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.overdraft-update.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor

#the name given to app spans in traces
quarkus.jaeger.service-name=overdraft-service
#the sample type: const, probabilistic, rate-limiting, and remote
quarkus.jaeger.sampler-type=const
#in conjunction with sampler-type, in this case 1 means all ops are logged
quarkus.jaeger.sampler-param=1

quarkus.http.port=8189