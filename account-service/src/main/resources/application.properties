## Openshift deployment properties ##

## Docker build is the only one supporting native image build
quarkus.openshift.build-strategy=docker
##For native image build
quarkus.native.container-build=true
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.route.expose=true
## Path to the docker file for the build
quarkus.openshift.native-dockerfile=src/main/docker/Dockerfile.native
## it can be also set with podman as alternative container runtime
quarkus.native.container-runtime=docker


## Datasource properties ##

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus_banking
quarkus.datasource.password=quarkus_banking
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/quarkus_banking
quarkus.hibernate-orm.database.generation=drop-and-create
#Script executed at H2 db initialization
quarkus.hibernate-orm.sql-load-script=import.sql
# Datasource properties for test execution
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.username=username-default
%test.quarkus.datasource.password=
%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:default
#Database tracing config
%dev.quarkus.datasource.jdbc.url=jdbc:tracing:postgresql://localhost:5432/quarkus_banking
#Specifies the JDBC driver for tracing. With multiple JDBC drivers on the class path, PostgreSQL, and Tracing,
# it's necessary to specify which one to use. Driver cannot be changed at runtime!!! (As env in Docker compose)
%dev.quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver
%staging.quarkus.datasource.jdbc.driver=io.opentracing.contrib.jdbc.TracingDriver
# Informs Hibernate that the underlying database type is PostgreSQL.
# Without this configuration property, Quarkus is unable to determine the database type from the chosen driver.
%dev.quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL10Dialect


%test.quarkus.http.port=8082

# Openshift Postgres settings for prod
%prod.quarkus.kubernetes-config.enabled=true
# to use secrets in openshift as configuration source
%prod.quarkus.kubernetes-config.secrets.enabled=true
# the secret name containing the postgres credentials
%prod.quarkus.kubernetes-config.secrets=postgresql
# the placeholder name is the key in the  postgresql secret in the cluster
%prod.quarkus.datasource.username=${database-user}
%prod.quarkus.datasource.password=${database-password}
# the format is retrived from the postgres Service info in the cluster (ClusterIp service)
# URL FORMAT: <servicename>.<namespace>.svc.<clustername>:<port>/<database>
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql.xan80-dev.svc.cluster.local:5432/${database-name}

## Kafka properties
%dev.kafka.bootstrap.servers=localhost:29092
%staging.kafka.bootstrap.servers=kafka:9092
mp.messaging.outgoing.account-overdrawn.connector=smallrye-kafka
# mp.messaging.<incoming|outgoing>.<channel_name>.<key_name>
#overdrawn is the name of the Kafka topic
mp.messaging.outgoing.account-overdrawn.topic=overdrawn
mp.messaging.outgoing.account-overdrawn.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.account-overdrawn.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.account-overdrawn.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor
%prod.kafka.bootstrap.servers=my-cluster-kafka-bootstrap.kafka:9092
mp.messaging.incoming.overdraft-update.topic=new-limit
mp.messaging.incoming.overdraft-update.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.overdraft-update.value.deserializer=org.acme.model.OverdraftLimitUpdateDeserializer
mp.messaging.incoming.overdraft-update.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor


## Opentracing config

#URL for the Jaeger collector. Microservices send any traces to the collector. Defining it as a
#production configuration means the default URL, http://jaeger-collector:14268/api/traces, will work
#running locally with Docker
%prod.quarkus.jaeger.endpoint= http://simplest-collector.observability:14268/api/traces
#the name given to app spans in traces
quarkus.jaeger.service-name=account-service
#the sample type: const, probabilistic, rate-limiting, and remote
quarkus.jaeger.sampler-type=const
#in conjunction with sampler-type, in this case 1 means all ops are logged
quarkus.jaeger.sampler-param=1

# Configure MicroProfile JWT
mp.jwt.verify.publickey=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlSsrNSfLfZiCJEfYw8MY/Xc4a4yGhNDKczTo6Pw/eI9HcZIAxRvuEg2RjkNTcnCiF7tSh9htXLQurUajLQW5esko9Nkyg1a5g0STzf2pMLEescs3HAXeDQmSDz/zk6H4uaag/lAu55Qot32WKcI6jrchNyOdN1WtY/ZcB7dGKziNCNBiuSTwQN1PPv0kUGLJTYSQ47W9DIRqAcsRGoMmn4ZR+CPbG6z+SQXMJ7bQdKck3EMt7GdRvxYqobUN8PBuAyk43hsU+xC81MtPVRJINUYjUtg4zHYQguU2VfKYzJwSsiqGGfaNJGVad9bfSm5ERjLb3c1EnEW+eHlmLYovmwIDAQAB
# this has to match the iss claim in the JWT token
mp.jwt.verify.issuer=http://localhost:8080/realms/bank



#quarkus.log.level=DEBUG

quarkus.http.port=8082