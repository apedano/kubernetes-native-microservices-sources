## Openshift deployment properties ##

## Docker build is the only one supporting native image build
quarkus.openshift.build-strategy=docker
##For native image build
quarkus.native.container-build=true
quarkus.kubernetes-client.trust-certs=true
quarkus.openshift.route.expose=true
## Path to the docker file for the build
quarkus.openshift.native-dockerfile=src/main/docker/Dockerfile.native
## it can be also set with podman as alternative container runtime
quarkus.native.container-runtime=docker


## Datasource properties ##

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=quarkus_banking
quarkus.datasource.password=quarkus_banking
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/quarkus_banking
quarkus.hibernate-orm.database.generation=drop-and-create
#Script executed at H2 db initialization
quarkus.hibernate-orm.sql-load-script=import.sql
# Datasource properties for test execution
%test.quarkus.datasource.db-kind=h2
%test.quarkus.datasource.username=username-default
%test.quarkus.datasource.password=
%test.quarkus.datasource.jdbc.url=jdbc:h2:tcp://localhost/mem:default

# Openshift Postgres settings for prod
%prod.quarkus.kubernetes-config.enabled=true
# to use secrets in openshift as configuration source
%prod.quarkus.kubernetes-config.secrets.enabled=true
# the secret name containing the postgres credentials
%prod.quarkus.kubernetes-config.secrets=postgresql
# the placeholder name is the key in the  postgresql secret in the cluster
%prod.quarkus.datasource.username=${database-user}
%prod.quarkus.datasource.password=${database-password}
# the format is retrived from the postgres Service info in the cluster (ClusterIp service)
# URL FORMAT: <servicename>.<namespace>.svc.<clustername>:<port>/<database>
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgresql.xan80-dev.svc.cluster.local:5432/${database-name}

#quarkus.log.level=DEBUG
%test.quarkus.http.port=8082